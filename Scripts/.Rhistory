runApp()
ui <- dashboardPage(
dashboardHeader(title = "Value boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
# Dynamic valueBoxes
valueBoxOutput("progressBox"),
valueBoxOutput("approvalBox")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
ui <- dashboardPage(
dashboardHeader(title = "Value boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
# Dynamic valueBoxes
valueBoxOutput("progressBox"),
valueBoxOutput("approvalBox")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Value boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
# Dynamic valueBoxes
valueBoxOutput("progressBox"),
valueBoxOutput("approvalBox")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderValueBox({
valueBox(
paste0(25 + input$count, "%"), "Progress", icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderValueBox({
valueBox(
"80%", "Approval", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Info boxes"),
dashboardSidebar(),
dashboardBody(
# infoBoxes with fill=FALSE
fluidRow(
# A static infoBox
infoBox("New Orders", 10 * 2, icon = icon("credit-card")),
# Dynamic infoBoxes
infoBoxOutput("progressBox"),
infoBoxOutput("approvalBox")
),
# infoBoxes with fill=TRUE
fluidRow(
infoBox("New Orders", 10 * 2, icon = icon("credit-card"), fill = TRUE),
infoBoxOutput("progressBox2"),
infoBoxOutput("approvalBox2")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
# Same as above, but with fill=TRUE
output$progressBox2 <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple", fill = TRUE
)
})
output$approvalBox2 <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow", fill = TRUE
)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboardPlus")
library(shinydashboardPlus)
runApp()
VB_style?
VB_style
VB_style??
VB_style
?VB_style
??VB_style
VB_style
?div
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
library(patchwork) # To display 2 charts together
library(hrbrthemes)
library(tidyverse)
library(tidyverse)
library(plyr)
library(plotrix)
library(tidyverse)
library(plyr)
library(plotrix)
library(latticeExtra)
dfb<-read.csv(url("https://raw.githubusercontent.com/daramireh/TRABAJO_SHINY/main/BANCO.csv"))
df<-read.csv(url("https://raw.githubusercontent.com/daramireh/TRABAJO_SHINY/main/PROCESO.csv"))
View(dfb)
View(df)
View(dfb)
View(df)
dfb%>%
plot_ly(x = ~CANAL, y = ~valor, type = "bar")%>%
layout(yaxis = list(title = 'Valor de transacciÃ³n en miles de millones'), barmode = 'stack')
dfb%>%
plot_ly(x = ~CANAL, y = ~valor, type = "bar")%>%
layout(yaxis = list(title = 'Valor de transacción en miles de millones'), barmode = 'stack')
dfb %>%
plot_ly(x = ~CANAL, y = ~valor, type = "bar")%>%
layout(yaxis = list(title = 'Valor de transacción en miles de millones'), barmode = 'stack')
shiny::runApp()
# 1. Data frames----
df_banco <-read.csv(url("https://raw.githubusercontent.com/daramireh/TRABAJO_SHINY/main/ACH_RESUMEN.csv"))
df_proceso <-read.csv(url("https://raw.githubusercontent.com/daramireh/TRABAJO_SHINY/main/ACH_FECHA.csv"))
df_proceso %>%
select("FECHAPROCESO","valor","consistentes")%>%
mutate(FECHAPROCESO=as.Date(FECHAPROCESO))%>%
group_by(FECHAPROCESO)%>%summarise_each(funs = sum)-> df1
View(df1)
df_proceso %>%
select("FECHAPROCESO", "valor", "consistentes", "trans")%>%
mutate(FECHAPROCESO=as.Date(FECHAPROCESO))%>%
group_by(FECHAPROCESO)%>%summarise_each(funs = sum)-> df1
View(df1)
runApp()
df_proceso %>%
select("FECHAPROCESO", "valor", "consistentes", "trans")%>%
mutate(FECHAPROCESO=as.Date(FECHAPROCESO))%>%
group_by(FECHAPROCESO)%>%summarise_each(funs = sum)-> df1
df_proceso %>%
select("FECHAPROCESO", "valor", "consistentes", "trans")%>%
mutate(FECHAPROCESO=as.Date(FECHAPROCESO))%>%
group_by(FECHAPROCESO)%>%summarise_each(funs = sum)-> df1
df1$pc_concil <- df1$consistentes / df1$trans * 100
View(df1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gra<-plot_ly()
df_proceso %>%
select("FECHAPROCESO","valor","consistentes","trans", "CANAL")%>%
mutate(FECHAPROCESO = as.Date(FECHAPROCESO)) %>%
group_by(FECHAPROCESO, CANAL) %>%
summarise_each(funs = sum) -> df_proceso_canal
library(shiny)
library(ggplot2)
library(shinydashboard)
library(plotly)
library(dplyr)
df_proceso %>%
select("FECHAPROCESO","valor","consistentes","trans", "CANAL")%>%
mutate(FECHAPROCESO = as.Date(FECHAPROCESO)) %>%
group_by(FECHAPROCESO, CANAL) %>%
summarise_each(funs = sum) -> df_proceso_canal
View(df_proceso_canal)
df_proceso_canal$pc_concil <- df_proceso_canal$consistentes / df_proceso_canal$trans *100
View(df_proceso_canal)
df_proceso_canal %>%
filter(CANAL %in% "ACH") %>%
df_proceso_canal_ach
df_proceso_canal %>%
filter(CANAL %in% "ACH") -> df_proceso_canal_ach
View(df_proceso_canal_ach)
gra_ach<-plot_ly()
gra_ach<-gra %>%
add_trace(x=df_proceso_canal_ach$FECHAPROCESO,y=df_proceso_canal_ach$trans,
type="scatter",
name="Número transacciones",
mode="lines")
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "<b>Conciliación</b> \n en %")
gra_ach<-gra_ach%>%
add_trace(x=df_proceso_canal_ach$FECHAPROCESO,y=df_proceso_canal_ach$pc_concil,
yaxis="y2",
type="scatter",
name="% Conciliaciones",
mode="lines")
gra_ach <- gra_ach %>%
layout(
title = "Relación del volumen de las transacciones con el porcentaje de conciliación", yaxis2 = ay,
xaxis = list(title="Fechas"),
yaxis = list(title="<b>Cantidad de transacciones</b>"))%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
gra_ach
View(df_proceso_canal_ach)
df_proceso %>%
select("FECHAPROCESO","valor","consistentes","trans", "CANAL")%>%
mutate(FECHAPROCESO = as.Date(FECHAPROCESO)) %>%
group_by(FECHAPROCESO, CANAL) %>%
summarise_each(funs = sum) -> df_proceso_canal
df_proceso_canal$pc_concil <- df_proceso_canal$consistentes / df_proceso_canal$trans *100
df_proceso_canal %>%
filter(CANAL %in% "ACH") -> df_proceso_canal_ach
gra_ach<-plot_ly()
gra_ach<-gra %>%
add_trace(x=df_proceso_canal_ach$FECHAPROCESO,y=df_proceso_canal_ach$trans,
type="scatter",
name="Número transacciones",
mode="lines")
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "<b>Conciliación</b> \n en %")
gra_ach<-gra_ach%>%
add_trace(x=df_proceso_canal_ach$FECHAPROCESO,y=df_proceso_canal_ach$pc_concil,
yaxis="y2",
type="scatter",
name="% Conciliaciones",
mode="lines")
gra_ach <- gra_ach %>%
layout(
title = "Relación del volumen de las transacciones con el porcentaje de conciliación", yaxis2 = ay,
xaxis = list(title="Fechas"),
yaxis = list(title="<b>Cantidad de transacciones</b>"))%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
gra_ach
View(df_proceso_canal_ach)
gra_ach<-plot_ly()
gra_ach<-plot_ly()
gra_ach<-gra_ach %>%
add_trace(x=df_proceso_canal_ach$FECHAPROCESO,y=df_proceso_canal_ach$trans,
type="scatter",
name="Número transacciones",
mode="lines")
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "<b>Conciliación</b> \n en %")
gra_ach<-gra_ach%>%
add_trace(x=df_proceso_canal_ach$FECHAPROCESO,y=df_proceso_canal_ach$pc_concil,
yaxis="y2",
type="scatter",
name="% Conciliaciones",
mode="lines")
gra_ach <- gra_ach %>%
layout(
title = "Relación del volumen de las transacciones con el porcentaje de conciliación", yaxis2 = ay,
xaxis = list(title="Fechas"),
yaxis = list(title="<b>Cantidad de transacciones</b>"))%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
gra_ach
### 3.2.2. Valor transacciones vs % conciliaciones ----
graf <-plot_ly()
graf <- graf%>%
add_trace(x=df_proceso_canal_ach$FECHAPROCESO, y=df_proceso_canal_ach$valor,
type="scatter",
name="Valor transacciones",
mode="lines")
ay <- list(tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "<b>Conciliación</b> \n en %")
graf<-graf %>%
add_trace(x=df_proceso_canal_ach$FECHAPROCESO,y=df_proceso_canal_ach$pc_concil,
yaxis="y2",
type="scatter",
name="% Conciliaciones",
mode="lines")
graf <- graf %>%
layout(
title = "Relación del monto total de las transacciones con el porcentaje de conciliación", yaxis2 = ay,
xaxis = list(title="Fechas"),
yaxis = list(title="<b>Valor de transacciones</b> \n en millones de pesos"))%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
runApp()
df_proceso_canal %>%
filter(CANAL %in% "PSE") -> df_proceso_canal_pse
### 3.3.1. Número de transacciones vs % Conciliaciones ----
gra_pse<-plot_ly()
gra_pse<-gra_pse %>%
add_trace(x=df_proceso_canal_pse$FECHAPROCESO,y=df_proceso_canal_pse$trans,
type="scatter",
name="Número transacciones",
mode="lines")
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "<b>Conciliación</b> \n en %")
gra_pse<-gra_pse%>%
add_trace(x=df_proceso_canal_pse$FECHAPROCESO,y=df_proceso_canal_pse$pc_concil,
yaxis="y2",
type="scatter",
name="% Conciliaciones",
mode="lines")
gra_pse <- gra_pse %>%
layout(
title = "Relación del volumen de las transacciones con el porcentaje de conciliación", yaxis2 = ay,
xaxis = list(title="Fechas"),
yaxis = list(title="<b>Cantidad de transacciones</b>"))%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
### 3.2.2. Valor transacciones vs % conciliaciones ----
graf_pse <-plot_ly()
graf_pse <- graf_pse%>%
add_trace(x=df_proceso_canal_pse$FECHAPROCESO, y=df_proceso_canal_pse$valor,
type="scatter",
name="Valor transacciones",
mode="lines")
ay <- list(tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "<b>Conciliación</b> \n en %")
graf_pse<-graf_pse %>%
add_trace(x=df_proceso_canal_pse$FECHAPROCESO,y=df_proceso_canal_pse$pc_concil,
yaxis="y2",
type="scatter",
name="% Conciliaciones",
mode="lines")
graf_pse <- graf_pse %>%
layout(
title = "Relación del monto total de las transacciones con el porcentaje de conciliación", yaxis2 = ay,
xaxis = list(title="Fechas"),
yaxis = list(title="<b>Valor de transacciones</b> \n en millones de pesos"))%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
gra_pse
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
